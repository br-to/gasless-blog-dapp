{"id":"5784ad07a6376d36c0b6cde374111acf","_format":"hh-sol-build-info-1","solcVersion":"0.8.28","solcLongVersion":"0.8.28+commit.7893614a","input":{"language":"Solidity","sources":{"contracts/PostManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/**\n * @title PostManager\n * @dev Contract for managing blog posts on-chain\n * @notice This contract stores IPFS/Bundlr CIDs and author addresses for blog posts\n */\ncontract PostManager {\n    /// @notice Auto-increment primary key for posts\n    uint256 public postCount;\n    \n    /// @notice Mapping from post ID to IPFS/Bundlr CID\n    mapping(uint256 => string) public posts;\n    \n    /// @notice Mapping from post ID to author address\n    mapping(uint256 => address) public authors;\n    \n    /// @notice Event emitted when a new post is created\n    event PostCreated(uint256 indexed id, address indexed author, string cid);\n    \n    /**\n     * @dev Creates a new post with the given CID\n     * @param cid The IPFS/Bundlr CID of the post content\n     * @return postId The ID of the created post\n     */\n    function createPost(string calldata cid) external returns (uint256 postId) {\n        // Increment post count to get new post ID\n        postCount++;\n        postId = postCount;\n        \n        // Store the post data\n        posts[postId] = cid;\n        authors[postId] = msg.sender;\n        \n        // Emit event\n        emit PostCreated(postId, msg.sender, cid);\n    }\n    \n    /**\n     * @dev Returns the post CID for a given post ID\n     * @param postId The post ID to query\n     * @return cid The IPFS/Bundlr CID of the post\n     */\n    function getPost(uint256 postId) external view returns (string memory cid) {\n        return posts[postId];\n    }\n    \n    /**\n     * @dev Returns the author address for a given post ID\n     * @param postId The post ID to query\n     * @return author The address of the post author\n     */\n    function getAuthor(uint256 postId) external view returns (address author) {\n        return authors[postId];\n    }\n    \n    /**\n     * @dev Returns the post data for a given post ID\n     * @param postId The post ID to query\n     * @return cid The IPFS/Bundlr CID of the post\n     * @return author The address of the post author\n     */\n    function getPostData(uint256 postId) external view returns (string memory cid, address author) {\n        return (posts[postId], authors[postId]);\n    }\n}"}},"settings":{"optimizer":{"enabled":true,"runs":200},"viaIR":true,"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"contracts/PostManager.sol":{"ast":{"absolutePath":"contracts/PostManager.sol","exportedSymbols":{"PostManager":[106]},"id":107,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:0"},{"abstract":false,"baseContracts":[],"canonicalName":"PostManager","contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"58:164:0","text":" @title PostManager\n @dev Contract for managing blog posts on-chain\n @notice This contract stores IPFS/Bundlr CIDs and author addresses for blog posts"},"fullyImplemented":true,"id":106,"linearizedBaseContracts":[106],"name":"PostManager","nameLocation":"232:11:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"250:48:0","text":"@notice Auto-increment primary key for posts"},"functionSelector":"17906c2e","id":5,"mutability":"mutable","name":"postCount","nameLocation":"318:9:0","nodeType":"VariableDeclaration","scope":106,"src":"303:24:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4,"name":"uint256","nodeType":"ElementaryTypeName","src":"303:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"338:51:0","text":"@notice Mapping from post ID to IPFS/Bundlr CID"},"functionSelector":"0b1e7f83","id":10,"mutability":"mutable","name":"posts","nameLocation":"428:5:0","nodeType":"VariableDeclaration","scope":106,"src":"394:39:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":9,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":7,"name":"uint256","nodeType":"ElementaryTypeName","src":"402:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"394:26:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":8,"name":"string","nodeType":"ElementaryTypeName","src":"413:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"public"},{"constant":false,"documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"444:50:0","text":"@notice Mapping from post ID to author address"},"functionSelector":"3db804da","id":15,"mutability":"mutable","name":"authors","nameLocation":"534:7:0","nodeType":"VariableDeclaration","scope":106,"src":"499:42:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":14,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":12,"name":"uint256","nodeType":"ElementaryTypeName","src":"507:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"499:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"518:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":16,"nodeType":"StructuredDocumentation","src":"552:52:0","text":"@notice Event emitted when a new post is created"},"eventSelector":"8e40a51278abe2f4b410c0a96ff0bdd024b22666ca334062bf72afd596984bd6","id":24,"name":"PostCreated","nameLocation":"615:11:0","nodeType":"EventDefinition","parameters":{"id":23,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18,"indexed":true,"mutability":"mutable","name":"id","nameLocation":"643:2:0","nodeType":"VariableDeclaration","scope":24,"src":"627:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":17,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":20,"indexed":true,"mutability":"mutable","name":"author","nameLocation":"663:6:0","nodeType":"VariableDeclaration","scope":24,"src":"647:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":19,"name":"address","nodeType":"ElementaryTypeName","src":"647:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":22,"indexed":false,"mutability":"mutable","name":"cid","nameLocation":"678:3:0","nodeType":"VariableDeclaration","scope":24,"src":"671:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":21,"name":"string","nodeType":"ElementaryTypeName","src":"671:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"626:56:0"},"src":"609:74:0"},{"body":{"id":59,"nodeType":"Block","src":"941:296:0","statements":[{"expression":{"id":33,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1002:11:0","subExpression":{"id":32,"name":"postCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"1002:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":34,"nodeType":"ExpressionStatement","src":"1002:11:0"},{"expression":{"id":37,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":35,"name":"postId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"1023:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":36,"name":"postCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"1032:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1023:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":38,"nodeType":"ExpressionStatement","src":"1023:18:0"},{"expression":{"id":43,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":39,"name":"posts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"1091:5:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":41,"indexExpression":{"id":40,"name":"postId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"1097:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1091:13:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":42,"name":"cid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1107:3:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"1091:19:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":44,"nodeType":"ExpressionStatement","src":"1091:19:0"},{"expression":{"id":50,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":45,"name":"authors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"1120:7:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":47,"indexExpression":{"id":46,"name":"postId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"1128:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1120:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":48,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1138:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1142:6:0","memberName":"sender","nodeType":"MemberAccess","src":"1138:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1120:28:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":51,"nodeType":"ExpressionStatement","src":"1120:28:0"},{"eventCall":{"arguments":[{"id":53,"name":"postId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"1206:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":54,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1214:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":55,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1218:6:0","memberName":"sender","nodeType":"MemberAccess","src":"1214:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":56,"name":"cid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1226:3:0","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":52,"name":"PostCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"1194:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,address,string memory)"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1194:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":58,"nodeType":"EmitStatement","src":"1189:41:0"}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"693:168:0","text":" @dev Creates a new post with the given CID\n @param cid The IPFS/Bundlr CID of the post content\n @return postId The ID of the created post"},"functionSelector":"c7303c61","id":60,"implemented":true,"kind":"function","modifiers":[],"name":"createPost","nameLocation":"875:10:0","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"cid","nameLocation":"902:3:0","nodeType":"VariableDeclaration","scope":60,"src":"886:19:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":26,"name":"string","nodeType":"ElementaryTypeName","src":"886:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"885:21:0"},"returnParameters":{"id":31,"nodeType":"ParameterList","parameters":[{"constant":false,"id":30,"mutability":"mutable","name":"postId","nameLocation":"933:6:0","nodeType":"VariableDeclaration","scope":60,"src":"925:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":29,"name":"uint256","nodeType":"ElementaryTypeName","src":"925:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"924:16:0"},"scope":106,"src":"866:371:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":72,"nodeType":"Block","src":"1484:37:0","statements":[{"expression":{"baseExpression":{"id":68,"name":"posts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"1501:5:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":70,"indexExpression":{"id":69,"name":"postId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"1507:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1501:13:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":67,"id":71,"nodeType":"Return","src":"1494:20:0"}]},"documentation":{"id":61,"nodeType":"StructuredDocumentation","src":"1247:157:0","text":" @dev Returns the post CID for a given post ID\n @param postId The post ID to query\n @return cid The IPFS/Bundlr CID of the post"},"functionSelector":"40731c24","id":73,"implemented":true,"kind":"function","modifiers":[],"name":"getPost","nameLocation":"1418:7:0","nodeType":"FunctionDefinition","parameters":{"id":64,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"postId","nameLocation":"1434:6:0","nodeType":"VariableDeclaration","scope":73,"src":"1426:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":62,"name":"uint256","nodeType":"ElementaryTypeName","src":"1426:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1425:16:0"},"returnParameters":{"id":67,"nodeType":"ParameterList","parameters":[{"constant":false,"id":66,"mutability":"mutable","name":"cid","nameLocation":"1479:3:0","nodeType":"VariableDeclaration","scope":73,"src":"1465:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":65,"name":"string","nodeType":"ElementaryTypeName","src":"1465:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1464:19:0"},"scope":106,"src":"1409:112:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":85,"nodeType":"Block","src":"1775:39:0","statements":[{"expression":{"baseExpression":{"id":81,"name":"authors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"1792:7:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":83,"indexExpression":{"id":82,"name":"postId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":76,"src":"1800:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1792:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":80,"id":84,"nodeType":"Return","src":"1785:22:0"}]},"documentation":{"id":74,"nodeType":"StructuredDocumentation","src":"1531:165:0","text":" @dev Returns the author address for a given post ID\n @param postId The post ID to query\n @return author The address of the post author"},"functionSelector":"9e2b8488","id":86,"implemented":true,"kind":"function","modifiers":[],"name":"getAuthor","nameLocation":"1710:9:0","nodeType":"FunctionDefinition","parameters":{"id":77,"nodeType":"ParameterList","parameters":[{"constant":false,"id":76,"mutability":"mutable","name":"postId","nameLocation":"1728:6:0","nodeType":"VariableDeclaration","scope":86,"src":"1720:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":75,"name":"uint256","nodeType":"ElementaryTypeName","src":"1720:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1719:16:0"},"returnParameters":{"id":80,"nodeType":"ParameterList","parameters":[{"constant":false,"id":79,"mutability":"mutable","name":"author","nameLocation":"1767:6:0","nodeType":"VariableDeclaration","scope":86,"src":"1759:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"1759:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1758:16:0"},"scope":106,"src":"1701:113:0","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":104,"nodeType":"Block","src":"2135:56:0","statements":[{"expression":{"components":[{"baseExpression":{"id":96,"name":"posts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2153:5:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":98,"indexExpression":{"id":97,"name":"postId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":89,"src":"2159:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2153:13:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},{"baseExpression":{"id":99,"name":"authors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"2168:7:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":101,"indexExpression":{"id":100,"name":"postId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":89,"src":"2176:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2168:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":102,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2152:32:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_string_storage_$_t_address_$","typeString":"tuple(string storage ref,address)"}},"functionReturnParameters":95,"id":103,"nodeType":"Return","src":"2145:39:0"}]},"documentation":{"id":87,"nodeType":"StructuredDocumentation","src":"1824:211:0","text":" @dev Returns the post data for a given post ID\n @param postId The post ID to query\n @return cid The IPFS/Bundlr CID of the post\n @return author The address of the post author"},"functionSelector":"4f8f0256","id":105,"implemented":true,"kind":"function","modifiers":[],"name":"getPostData","nameLocation":"2049:11:0","nodeType":"FunctionDefinition","parameters":{"id":90,"nodeType":"ParameterList","parameters":[{"constant":false,"id":89,"mutability":"mutable","name":"postId","nameLocation":"2069:6:0","nodeType":"VariableDeclaration","scope":105,"src":"2061:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":88,"name":"uint256","nodeType":"ElementaryTypeName","src":"2061:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2060:16:0"},"returnParameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"cid","nameLocation":"2114:3:0","nodeType":"VariableDeclaration","scope":105,"src":"2100:17:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":91,"name":"string","nodeType":"ElementaryTypeName","src":"2100:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":94,"mutability":"mutable","name":"author","nameLocation":"2127:6:0","nodeType":"VariableDeclaration","scope":105,"src":"2119:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2119:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2099:35:0"},"scope":106,"src":"2040:151:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":107,"src":"223:1970:0","usedErrors":[],"usedEvents":[24]}],"src":"32:2161:0"},"id":0}},"contracts":{"contracts/PostManager.sol":{"PostManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":true,"internalType":"address","name":"author","type":"address"},{"indexed":false,"internalType":"string","name":"cid","type":"string"}],"name":"PostCreated","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"authors","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"cid","type":"string"}],"name":"createPost","outputs":[{"internalType":"uint256","name":"postId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"postId","type":"uint256"}],"name":"getAuthor","outputs":[{"internalType":"address","name":"author","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"postId","type":"uint256"}],"name":"getPost","outputs":[{"internalType":"string","name":"cid","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"postId","type":"uint256"}],"name":"getPostData","outputs":[{"internalType":"string","name":"cid","type":"string"},{"internalType":"address","name":"author","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"posts","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract for managing blog posts on-chain","kind":"dev","methods":{"createPost(string)":{"details":"Creates a new post with the given CID","params":{"cid":"The IPFS/Bundlr CID of the post content"},"returns":{"postId":"The ID of the created post"}},"getAuthor(uint256)":{"details":"Returns the author address for a given post ID","params":{"postId":"The post ID to query"},"returns":{"author":"The address of the post author"}},"getPost(uint256)":{"details":"Returns the post CID for a given post ID","params":{"postId":"The post ID to query"},"returns":{"cid":"The IPFS/Bundlr CID of the post"}},"getPostData(uint256)":{"details":"Returns the post data for a given post ID","params":{"postId":"The post ID to query"},"returns":{"author":"The address of the post author","cid":"The IPFS/Bundlr CID of the post"}}},"title":"PostManager","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601557610500908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80630b1e7f831461032c57806317906c2e146103705780633db804da1461029457806340731c241461032c5780634f8f0256146102c85780639e2b8488146102945763c7303c611461006957600080fd5b3461028f57602036600319011261028f5760043567ffffffffffffffff811161028f573660238201121561028f57806004013567ffffffffffffffff811161028f57366024828401011161028f57600054600019811461027957600101908160005581600052600160205260406000206000936100e6825461038e565b601f8111610234575b508390856020969385601f81116001146101a7577f8e40a51278abe2f4b410c0a96ff0bdd024b22666ca334062bf72afd596984bd694958391610199575b508660011b906000198860031b1c19161790555b8381526002875260408120336bffffffffffffffffffffffff60a01b82541617905584602460405193898552828a860152016040840137604085830101526040813395601f80199101168101030190a3604051908152f35b60249150840101353861012d565b8183528883209095601f198716845b8181106102145750967f8e40a51278abe2f4b410c0a96ff0bdd024b22666ca334062bf72afd596984bd69697106101f7575b5050600186811b019055610141565b840160240135600019600389901b60f8161c1916905538806101e8565b8287016024013584558998508a9750600190930192918b01918b016101b6565b82865260208620601f850160051c8101916020861061026f575b601f0160051c01905b81811061026457506100ef565b868155600101610257565b909150819061024e565b634e487b7160e01b600052601160045260246000fd5b600080fd5b3461028f57602036600319011261028f576004356000526002602052602060018060a01b0360406000205416604051908152f35b3461028f57602036600319011261028f57610322600435806000526001602052604060002090600052600260205261030d60018060a01b0360406000205416916103c8565b90604051928392604084526040840190610489565b9060208301520390f35b3461028f57602036600319011261028f57600435600052600160205261036c61035860406000206103c8565b604051918291602083526020830190610489565b0390f35b3461028f57600036600319011261028f576020600054604051908152f35b90600182811c921680156103be575b60208310146103a857565b634e487b7160e01b600052602260045260246000fd5b91607f169161039d565b90604051916000908054906103dc8261038e565b808652916001811690811561046b5750600114610430575b5050829003601f01601f1916820167ffffffffffffffff81118382101761041a57604052565b634e487b7160e01b600052604160045260246000fd5b90915060005260206000206000905b82821061045557506020915083010138806103f4565b600181602092548385890101520191019061043f565b9150506020925060ff191682850152151560051b83010138806103f4565b919082519283825260005b8481106104b5575050826000602080949584010152601f8019910116010190565b8060208092840101518282860101520161049456fea264697066735822122038781188049bc6a6d22608af4a109842b1a0837506d2af17c700347eb7c14e9c64736f6c634300081c0033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x15 JUMPI PUSH2 0x500 SWAP1 DUP2 PUSH2 0x1B DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB1E7F83 EQ PUSH2 0x32C JUMPI DUP1 PUSH4 0x17906C2E EQ PUSH2 0x370 JUMPI DUP1 PUSH4 0x3DB804DA EQ PUSH2 0x294 JUMPI DUP1 PUSH4 0x40731C24 EQ PUSH2 0x32C JUMPI DUP1 PUSH4 0x4F8F0256 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x9E2B8488 EQ PUSH2 0x294 JUMPI PUSH4 0xC7303C61 EQ PUSH2 0x69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x28F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x28F JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x28F JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x28F JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x28F JUMPI CALLDATASIZE PUSH1 0x24 DUP3 DUP5 ADD ADD GT PUSH2 0x28F JUMPI PUSH1 0x0 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x279 JUMPI PUSH1 0x1 ADD SWAP1 DUP2 PUSH1 0x0 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP4 PUSH2 0xE6 DUP3 SLOAD PUSH2 0x38E JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x234 JUMPI JUMPDEST POP DUP4 SWAP1 DUP6 PUSH1 0x20 SWAP7 SWAP4 DUP6 PUSH1 0x1F DUP2 GT PUSH1 0x1 EQ PUSH2 0x1A7 JUMPI PUSH32 0x8E40A51278ABE2F4B410C0A96FF0BDD024B22666CA334062BF72AFD596984BD6 SWAP5 SWAP6 DUP4 SWAP2 PUSH2 0x199 JUMPI JUMPDEST POP DUP7 PUSH1 0x1 SHL SWAP1 PUSH1 0x0 NOT DUP9 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x2 DUP8 MSTORE PUSH1 0x40 DUP2 KECCAK256 CALLER PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE DUP5 PUSH1 0x24 PUSH1 0x40 MLOAD SWAP4 DUP10 DUP6 MSTORE DUP3 DUP11 DUP7 ADD MSTORE ADD PUSH1 0x40 DUP5 ADD CALLDATACOPY PUSH1 0x40 DUP6 DUP4 ADD ADD MSTORE PUSH1 0x40 DUP2 CALLER SWAP6 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 LOG3 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x24 SWAP2 POP DUP5 ADD ADD CALLDATALOAD CODESIZE PUSH2 0x12D JUMP JUMPDEST DUP2 DUP4 MSTORE DUP9 DUP4 KECCAK256 SWAP1 SWAP6 PUSH1 0x1F NOT DUP8 AND DUP5 JUMPDEST DUP2 DUP2 LT PUSH2 0x214 JUMPI POP SWAP7 PUSH32 0x8E40A51278ABE2F4B410C0A96FF0BDD024B22666CA334062BF72AFD596984BD6 SWAP7 SWAP8 LT PUSH2 0x1F7 JUMPI JUMPDEST POP POP PUSH1 0x1 DUP7 DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x141 JUMP JUMPDEST DUP5 ADD PUSH1 0x24 ADD CALLDATALOAD PUSH1 0x0 NOT PUSH1 0x3 DUP10 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 PUSH2 0x1E8 JUMP JUMPDEST DUP3 DUP8 ADD PUSH1 0x24 ADD CALLDATALOAD DUP5 SSTORE DUP10 SWAP9 POP DUP11 SWAP8 POP PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP12 ADD SWAP2 DUP12 ADD PUSH2 0x1B6 JUMP JUMPDEST DUP3 DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0x26F JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x264 JUMPI POP PUSH2 0xEF JUMP JUMPDEST DUP7 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x257 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x24E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x28F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x28F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x28F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x28F JUMPI PUSH2 0x322 PUSH1 0x4 CALLDATALOAD DUP1 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH2 0x30D PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND SWAP2 PUSH2 0x3C8 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH1 0x40 DUP5 MSTORE PUSH1 0x40 DUP5 ADD SWAP1 PUSH2 0x489 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP4 ADD MSTORE SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x28F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x28F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH2 0x36C PUSH2 0x358 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x3C8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x28F JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x28F JUMPI PUSH1 0x20 PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x3BE JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x3A8 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x39D JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH1 0x0 SWAP1 DUP1 SLOAD SWAP1 PUSH2 0x3DC DUP3 PUSH2 0x38E JUMP JUMPDEST DUP1 DUP7 MSTORE SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x46B JUMPI POP PUSH1 0x1 EQ PUSH2 0x430 JUMPI JUMPDEST POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP4 DUP3 LT OR PUSH2 0x41A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x455 JUMPI POP PUSH1 0x20 SWAP2 POP DUP4 ADD ADD CODESIZE DUP1 PUSH2 0x3F4 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP10 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0x43F JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD CODESIZE DUP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x4B5 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x20 DUP1 SWAP3 DUP5 ADD ADD MLOAD DUP3 DUP3 DUP7 ADD ADD MSTORE ADD PUSH2 0x494 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE PUSH25 0x1188049BC6A6D22608AF4A109842B1A0837506D2AF17C70034 PUSH31 0xB7C14E9C64736F6C634300081C003300000000000000000000000000000000 ","sourceMap":"223:1970:0:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_encode_string":{"entryPoint":1161,"id":null,"parameterSlots":2,"returnSlots":1},"copy_array_from_storage_to_memory_string":{"entryPoint":968,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":910,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436101561001257600080fd5b60003560e01c80630b1e7f831461032c57806317906c2e146103705780633db804da1461029457806340731c241461032c5780634f8f0256146102c85780639e2b8488146102945763c7303c611461006957600080fd5b3461028f57602036600319011261028f5760043567ffffffffffffffff811161028f573660238201121561028f57806004013567ffffffffffffffff811161028f57366024828401011161028f57600054600019811461027957600101908160005581600052600160205260406000206000936100e6825461038e565b601f8111610234575b508390856020969385601f81116001146101a7577f8e40a51278abe2f4b410c0a96ff0bdd024b22666ca334062bf72afd596984bd694958391610199575b508660011b906000198860031b1c19161790555b8381526002875260408120336bffffffffffffffffffffffff60a01b82541617905584602460405193898552828a860152016040840137604085830101526040813395601f80199101168101030190a3604051908152f35b60249150840101353861012d565b8183528883209095601f198716845b8181106102145750967f8e40a51278abe2f4b410c0a96ff0bdd024b22666ca334062bf72afd596984bd69697106101f7575b5050600186811b019055610141565b840160240135600019600389901b60f8161c1916905538806101e8565b8287016024013584558998508a9750600190930192918b01918b016101b6565b82865260208620601f850160051c8101916020861061026f575b601f0160051c01905b81811061026457506100ef565b868155600101610257565b909150819061024e565b634e487b7160e01b600052601160045260246000fd5b600080fd5b3461028f57602036600319011261028f576004356000526002602052602060018060a01b0360406000205416604051908152f35b3461028f57602036600319011261028f57610322600435806000526001602052604060002090600052600260205261030d60018060a01b0360406000205416916103c8565b90604051928392604084526040840190610489565b9060208301520390f35b3461028f57602036600319011261028f57600435600052600160205261036c61035860406000206103c8565b604051918291602083526020830190610489565b0390f35b3461028f57600036600319011261028f576020600054604051908152f35b90600182811c921680156103be575b60208310146103a857565b634e487b7160e01b600052602260045260246000fd5b91607f169161039d565b90604051916000908054906103dc8261038e565b808652916001811690811561046b5750600114610430575b5050829003601f01601f1916820167ffffffffffffffff81118382101761041a57604052565b634e487b7160e01b600052604160045260246000fd5b90915060005260206000206000905b82821061045557506020915083010138806103f4565b600181602092548385890101520191019061043f565b9150506020925060ff191682850152151560051b83010138806103f4565b919082519283825260005b8481106104b5575050826000602080949584010152601f8019910116010190565b8060208092840101518282860101520161049456fea264697066735822122038781188049bc6a6d22608af4a109842b1a0837506d2af17c700347eb7c14e9c64736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB1E7F83 EQ PUSH2 0x32C JUMPI DUP1 PUSH4 0x17906C2E EQ PUSH2 0x370 JUMPI DUP1 PUSH4 0x3DB804DA EQ PUSH2 0x294 JUMPI DUP1 PUSH4 0x40731C24 EQ PUSH2 0x32C JUMPI DUP1 PUSH4 0x4F8F0256 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x9E2B8488 EQ PUSH2 0x294 JUMPI PUSH4 0xC7303C61 EQ PUSH2 0x69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x28F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x28F JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x28F JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x28F JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x28F JUMPI CALLDATASIZE PUSH1 0x24 DUP3 DUP5 ADD ADD GT PUSH2 0x28F JUMPI PUSH1 0x0 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x279 JUMPI PUSH1 0x1 ADD SWAP1 DUP2 PUSH1 0x0 SSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP4 PUSH2 0xE6 DUP3 SLOAD PUSH2 0x38E JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x234 JUMPI JUMPDEST POP DUP4 SWAP1 DUP6 PUSH1 0x20 SWAP7 SWAP4 DUP6 PUSH1 0x1F DUP2 GT PUSH1 0x1 EQ PUSH2 0x1A7 JUMPI PUSH32 0x8E40A51278ABE2F4B410C0A96FF0BDD024B22666CA334062BF72AFD596984BD6 SWAP5 SWAP6 DUP4 SWAP2 PUSH2 0x199 JUMPI JUMPDEST POP DUP7 PUSH1 0x1 SHL SWAP1 PUSH1 0x0 NOT DUP9 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST DUP4 DUP2 MSTORE PUSH1 0x2 DUP8 MSTORE PUSH1 0x40 DUP2 KECCAK256 CALLER PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE DUP5 PUSH1 0x24 PUSH1 0x40 MLOAD SWAP4 DUP10 DUP6 MSTORE DUP3 DUP11 DUP7 ADD MSTORE ADD PUSH1 0x40 DUP5 ADD CALLDATACOPY PUSH1 0x40 DUP6 DUP4 ADD ADD MSTORE PUSH1 0x40 DUP2 CALLER SWAP6 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 LOG3 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x24 SWAP2 POP DUP5 ADD ADD CALLDATALOAD CODESIZE PUSH2 0x12D JUMP JUMPDEST DUP2 DUP4 MSTORE DUP9 DUP4 KECCAK256 SWAP1 SWAP6 PUSH1 0x1F NOT DUP8 AND DUP5 JUMPDEST DUP2 DUP2 LT PUSH2 0x214 JUMPI POP SWAP7 PUSH32 0x8E40A51278ABE2F4B410C0A96FF0BDD024B22666CA334062BF72AFD596984BD6 SWAP7 SWAP8 LT PUSH2 0x1F7 JUMPI JUMPDEST POP POP PUSH1 0x1 DUP7 DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x141 JUMP JUMPDEST DUP5 ADD PUSH1 0x24 ADD CALLDATALOAD PUSH1 0x0 NOT PUSH1 0x3 DUP10 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 PUSH2 0x1E8 JUMP JUMPDEST DUP3 DUP8 ADD PUSH1 0x24 ADD CALLDATALOAD DUP5 SSTORE DUP10 SWAP9 POP DUP11 SWAP8 POP PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP12 ADD SWAP2 DUP12 ADD PUSH2 0x1B6 JUMP JUMPDEST DUP3 DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0x26F JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x264 JUMPI POP PUSH2 0xEF JUMP JUMPDEST DUP7 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x257 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x24E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x28F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x28F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x28F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x28F JUMPI PUSH2 0x322 PUSH1 0x4 CALLDATALOAD DUP1 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH2 0x30D PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND SWAP2 PUSH2 0x3C8 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH1 0x40 DUP5 MSTORE PUSH1 0x40 DUP5 ADD SWAP1 PUSH2 0x489 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP4 ADD MSTORE SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x28F JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x28F JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH2 0x36C PUSH2 0x358 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x3C8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x489 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x28F JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x28F JUMPI PUSH1 0x20 PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x3BE JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x3A8 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x39D JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH1 0x0 SWAP1 DUP1 SLOAD SWAP1 PUSH2 0x3DC DUP3 PUSH2 0x38E JUMP JUMPDEST DUP1 DUP7 MSTORE SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x46B JUMPI POP PUSH1 0x1 EQ PUSH2 0x430 JUMPI JUMPDEST POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP4 DUP3 LT OR PUSH2 0x41A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x455 JUMPI POP PUSH1 0x20 SWAP2 POP DUP4 ADD ADD CODESIZE DUP1 PUSH2 0x3F4 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP10 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0x43F JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP6 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD CODESIZE DUP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x4B5 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x20 DUP1 SWAP3 DUP5 ADD ADD MLOAD DUP3 DUP3 DUP7 ADD ADD MSTORE ADD PUSH2 0x494 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE PUSH25 0x1188049BC6A6D22608AF4A109842B1A0837506D2AF17C70034 PUSH31 0xB7C14E9C64736F6C634300081C003300000000000000000000000000000000 ","sourceMap":"223:1970:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;223:1970:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;223:1970:0;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;1194:36;223:1970;;;;;;;;;;;;;;;;;;;;;;;;;;;1120:7;223:1970;;;;;1138:10;223:1970;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1138:10;;223:1970;;;;;;;;;1194:36;;;;223:1970;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;223:1970:0;;;;;;;;;;;1194:36;223:1970;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;223:1970:0;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;223:1970:0;;-1:-1:-1;223:1970:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;223:1970:0;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;223:1970:0;;;;;;;;1792:7;223:1970;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;223:1970:0;;;;;;;;;;;;;;;;;;;2168:7;223:1970;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;;223:1970:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;223:1970:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;223:1970:0;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;223:1970:0;;;;;-1:-1:-1;;223:1970:0;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;223:1970:0;;;;;-1:-1:-1;223:1970:0;;;;;-1:-1:-1;223:1970:0;;-1:-1:-1;223:1970:0;-1:-1:-1;223:1970:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;223:1970:0;;;;;;;;;-1:-1:-1;223:1970:0;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"256000","executionCost":"300","totalCost":"256300"},"external":{"authors(uint256)":"2378","createPost(string)":"infinite","getAuthor(uint256)":"2444","getPost(uint256)":"infinite","getPostData(uint256)":"infinite","postCount()":"2272","posts(uint256)":"infinite"}},"methodIdentifiers":{"authors(uint256)":"3db804da","createPost(string)":"c7303c61","getAuthor(uint256)":"9e2b8488","getPost(uint256)":"40731c24","getPostData(uint256)":"4f8f0256","postCount()":"17906c2e","posts(uint256)":"0b1e7f83"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"PostCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"createPost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"getAuthor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"getPost\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"getPostData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"posts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract for managing blog posts on-chain\",\"kind\":\"dev\",\"methods\":{\"createPost(string)\":{\"details\":\"Creates a new post with the given CID\",\"params\":{\"cid\":\"The IPFS/Bundlr CID of the post content\"},\"returns\":{\"postId\":\"The ID of the created post\"}},\"getAuthor(uint256)\":{\"details\":\"Returns the author address for a given post ID\",\"params\":{\"postId\":\"The post ID to query\"},\"returns\":{\"author\":\"The address of the post author\"}},\"getPost(uint256)\":{\"details\":\"Returns the post CID for a given post ID\",\"params\":{\"postId\":\"The post ID to query\"},\"returns\":{\"cid\":\"The IPFS/Bundlr CID of the post\"}},\"getPostData(uint256)\":{\"details\":\"Returns the post data for a given post ID\",\"params\":{\"postId\":\"The post ID to query\"},\"returns\":{\"author\":\"The address of the post author\",\"cid\":\"The IPFS/Bundlr CID of the post\"}}},\"title\":\"PostManager\",\"version\":1},\"userdoc\":{\"events\":{\"PostCreated(uint256,address,string)\":{\"notice\":\"Event emitted when a new post is created\"}},\"kind\":\"user\",\"methods\":{\"authors(uint256)\":{\"notice\":\"Mapping from post ID to author address\"},\"postCount()\":{\"notice\":\"Auto-increment primary key for posts\"},\"posts(uint256)\":{\"notice\":\"Mapping from post ID to IPFS/Bundlr CID\"}},\"notice\":\"This contract stores IPFS/Bundlr CIDs and author addresses for blog posts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PostManager.sol\":\"PostManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/PostManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/**\\n * @title PostManager\\n * @dev Contract for managing blog posts on-chain\\n * @notice This contract stores IPFS/Bundlr CIDs and author addresses for blog posts\\n */\\ncontract PostManager {\\n    /// @notice Auto-increment primary key for posts\\n    uint256 public postCount;\\n    \\n    /// @notice Mapping from post ID to IPFS/Bundlr CID\\n    mapping(uint256 => string) public posts;\\n    \\n    /// @notice Mapping from post ID to author address\\n    mapping(uint256 => address) public authors;\\n    \\n    /// @notice Event emitted when a new post is created\\n    event PostCreated(uint256 indexed id, address indexed author, string cid);\\n    \\n    /**\\n     * @dev Creates a new post with the given CID\\n     * @param cid The IPFS/Bundlr CID of the post content\\n     * @return postId The ID of the created post\\n     */\\n    function createPost(string calldata cid) external returns (uint256 postId) {\\n        // Increment post count to get new post ID\\n        postCount++;\\n        postId = postCount;\\n        \\n        // Store the post data\\n        posts[postId] = cid;\\n        authors[postId] = msg.sender;\\n        \\n        // Emit event\\n        emit PostCreated(postId, msg.sender, cid);\\n    }\\n    \\n    /**\\n     * @dev Returns the post CID for a given post ID\\n     * @param postId The post ID to query\\n     * @return cid The IPFS/Bundlr CID of the post\\n     */\\n    function getPost(uint256 postId) external view returns (string memory cid) {\\n        return posts[postId];\\n    }\\n    \\n    /**\\n     * @dev Returns the author address for a given post ID\\n     * @param postId The post ID to query\\n     * @return author The address of the post author\\n     */\\n    function getAuthor(uint256 postId) external view returns (address author) {\\n        return authors[postId];\\n    }\\n    \\n    /**\\n     * @dev Returns the post data for a given post ID\\n     * @param postId The post ID to query\\n     * @return cid The IPFS/Bundlr CID of the post\\n     * @return author The address of the post author\\n     */\\n    function getPostData(uint256 postId) external view returns (string memory cid, address author) {\\n        return (posts[postId], authors[postId]);\\n    }\\n}\",\"keccak256\":\"0x7c1e831d992641a6b579fa3021e1097e9d75670a65926e7758475fbb4c44d627\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":5,"contract":"contracts/PostManager.sol:PostManager","label":"postCount","offset":0,"slot":"0","type":"t_uint256"},{"astId":10,"contract":"contracts/PostManager.sol:PostManager","label":"posts","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":15,"contract":"contracts/PostManager.sol:PostManager","label":"authors","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"events":{"PostCreated(uint256,address,string)":{"notice":"Event emitted when a new post is created"}},"kind":"user","methods":{"authors(uint256)":{"notice":"Mapping from post ID to author address"},"postCount()":{"notice":"Auto-increment primary key for posts"},"posts(uint256)":{"notice":"Mapping from post ID to IPFS/Bundlr CID"}},"notice":"This contract stores IPFS/Bundlr CIDs and author addresses for blog posts","version":1}}}}}}