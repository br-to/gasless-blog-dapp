/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PostManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authors"
      | "createPost"
      | "getAuthor"
      | "getPost"
      | "getPostData"
      | "postCount"
      | "posts"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PostCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "authors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "createPost", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAuthor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPostData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "postCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "posts", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "authors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAuthor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPostData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "posts", data: BytesLike): Result;
}

export namespace PostCreatedEvent {
  export type InputTuple = [id: BigNumberish, author: AddressLike, cid: string];
  export type OutputTuple = [id: bigint, author: string, cid: string];
  export interface OutputObject {
    id: bigint;
    author: string;
    cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PostManager extends BaseContract {
  connect(runner?: ContractRunner | null): PostManager;
  waitForDeployment(): Promise<this>;

  interface: PostManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authors: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createPost: TypedContractMethod<[cid: string], [bigint], "nonpayable">;

  getAuthor: TypedContractMethod<[postId: BigNumberish], [string], "view">;

  getPost: TypedContractMethod<[postId: BigNumberish], [string], "view">;

  getPostData: TypedContractMethod<
    [postId: BigNumberish],
    [[string, string] & { cid: string; author: string }],
    "view"
  >;

  postCount: TypedContractMethod<[], [bigint], "view">;

  posts: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authors"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createPost"
  ): TypedContractMethod<[cid: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getAuthor"
  ): TypedContractMethod<[postId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPost"
  ): TypedContractMethod<[postId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPostData"
  ): TypedContractMethod<
    [postId: BigNumberish],
    [[string, string] & { cid: string; author: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "postCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "posts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "PostCreated"
  ): TypedContractEvent<
    PostCreatedEvent.InputTuple,
    PostCreatedEvent.OutputTuple,
    PostCreatedEvent.OutputObject
  >;

  filters: {
    "PostCreated(uint256,address,string)": TypedContractEvent<
      PostCreatedEvent.InputTuple,
      PostCreatedEvent.OutputTuple,
      PostCreatedEvent.OutputObject
    >;
    PostCreated: TypedContractEvent<
      PostCreatedEvent.InputTuple,
      PostCreatedEvent.OutputTuple,
      PostCreatedEvent.OutputObject
    >;
  };
}
